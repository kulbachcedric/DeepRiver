name: unit-tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python: ['3.10', '3.11', '3.12']
        os: [ubuntu-latest, macos-latest, windows-latest]
        river: ['0.21.1', '0.22.0']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          python-version: ${{ matrix.python }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install Poetry (Windows fallback)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
        shell: powershell

      - name: Configure Poetry for Windows
        if: runner.os == 'Windows'
        run: poetry config virtualenvs.in-project true
        shell: powershell

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python }}-${{ matrix.river }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies with river ${{ matrix.river }}
        run: |
          poetry add river==${{ matrix.river }}
          poetry install --no-interaction
        shell: bash

      - name: Download datasets
        run: poetry run python -c "from river import datasets; datasets.CreditCard().download(); datasets.Elec2().download(); datasets.Keystroke().download()"

      - name: Run tests
        run: |
          export PYTHONPATH=$PWD
          poetry run pytest -v --cov=deep_river -m "not datasets"
        shell: bash

      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v2
